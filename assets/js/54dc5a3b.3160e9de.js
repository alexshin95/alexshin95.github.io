"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[661],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},h=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),s=u(n),f=o,d=s["".concat(c,".").concat(f)]||s[f]||p[f]||i;return n?r.createElement(d,a(a({ref:t},h),{},{components:n})):r.createElement(d,a({ref:t},h))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},3952:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={id:"leetcode-intro",title:"Leetcode Intro"},c="Container with Most Water",u={unversionedId:"leetcode/leetcode-intro",id:"leetcode/leetcode-intro",title:"Leetcode Intro",description:"Problem",source:"@site/docs/leetcode/leetcode-intro.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode-intro",permalink:"/docs/leetcode/leetcode-intro",draft:!1,tags:[],version:"current",frontMatter:{id:"leetcode-intro",title:"Leetcode Intro"},sidebar:"tutorialSidebar",previous:{title:"Leetcode",permalink:"/docs/category/leetcode"}},h={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],s={toc:p};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"container-with-most-water"},"Container with Most Water"),(0,i.kt)("h2",{id:"problem"},"Problem"),(0,i.kt)("ol",{start:11},(0,i.kt)("li",{parentName:"ol"},"Container With Most Water\nMedium")),(0,i.kt)("p",null,"17385"),(0,i.kt)("p",null,"960"),(0,i.kt)("p",null,"Add to List"),(0,i.kt)("p",null,"Share\nYou are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height","[i]",")."),(0,i.kt)("p",null,"Find two lines that together with the x-axis form a container, such that the container contains the most water."),(0,i.kt)("p",null,"Return the maximum amount of water a container can store."),(0,i.kt)("p",null,"Notice that you may not slant the container."),(0,i.kt)("p",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\nExample 2:\n\nInput: height = [1,1]\nOutput: 1\n")),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"n == height.length\n2 <= n <= 105\n0 <= height[i] <= 104\n")),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        if len(height) < 2:\n            return 0\n        left = 0\n        right = len(height) - 1\n        res = 0\n        \n        #two pointers left and right. Start at both ends of height array and compare which pointer has a \n        #larger height. If left height is less than the right, then we know the most water that can be contained\n        #is the left height * the width ( right - left ).\n        while left < right:\n            if height[left] <= height[right]:\n                temp = height[left] * (right - left)\n                left += 1\n            else:\n                temp = height[right] * (right - left)\n                right -= 1\n            res = max(res, temp)\n        return res\n")))}f.isMDXComponent=!0}}]);